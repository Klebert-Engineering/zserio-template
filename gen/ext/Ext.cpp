/**
 * Automatically generated by Zserio C++ extension version 1.1.0.
 */

#include <zserio/BitSizeOfCalculator.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>

#include "ext/Type.h"

namespace ext
{

Type::Type() : m_value(static_cast<e_Type>(0))
{
}

Type::Type(e_Type value) : m_value(value)
{
}

Type::Type(_base_type baseTypeValue)
        : m_value(static_cast<e_Type>(baseTypeValue))
{
}

Type::Type(zserio::BitStreamReader& _in)
{
    read(_in);
}

Type::operator e_Type() const
{
    return m_value;
}

uint8_t Type::getValue() const
{
    return m_value;
}

size_t Type::bitSizeOf(size_t) const
{
    return UINT8_C(8);
}

size_t Type::initializeOffsets(size_t _bitPosition) const
{
    return _bitPosition + bitSizeOf(_bitPosition);
}

bool Type::operator==(const Type& other) const
{
    return m_value == other.m_value;
}

bool Type::operator==(e_Type other) const
{
    return m_value == other;
}

int Type::hashCode() const
{
    return zserio::calcHashCode(zserio::HASH_SEED, static_cast<uint8_t>(m_value));
}

void Type::read(zserio::BitStreamReader& _in)
{
    m_value = toEnum(_in.readBits(UINT8_C(8)));
}

void Type::write(zserio::BitStreamWriter& _out, zserio::PreWriteAction) const
{
    _out.writeBits(static_cast<uint8_t>(m_value), UINT8_C(8));
}

const char* Type::toString() const
{
    switch (m_value)
    {
    case FOO:
        return "FOO";
    case BAR:
        return "BAR";
    default:
        return "UNKNOWN";
    }
}

Type Type::toEnum(uint8_t rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
        return FOO;
    case UINT8_C(1):
        return BAR;
    default:
        throw zserio::CppRuntimeException("Unknown value for enumeration Type: " +
                zserio::convertToString(rawValue) + "!");
    }
}

} // namespace ext

/**
 * Automatically generated by Zserio C++ extension version 1.1.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "ext/Ext.h"

namespace ext
{


Ext::Ext(zserio::BitStreamReader& _in)
{
    read(_in);
}

void Ext::initializeChildren()
{
    m_map.initializeChildren();
}


size_t Ext::bitSizeOf(size_t _bitPosition)
{
    size_t _endBitPosition = _bitPosition;

    _endBitPosition += m_map.bitSizeOf(_endBitPosition);

    return _endBitPosition - _bitPosition;
}

size_t Ext::initializeOffsets(size_t _bitPosition)
{
    size_t _endBitPosition = _bitPosition;

    _endBitPosition = m_map.initializeOffsets(_endBitPosition);

    return _endBitPosition;
}


int Ext::hashCode() const
{
    int _result = zserio::HASH_SEED;

        _result = zserio::calcHashCode(_result, m_map);

    return _result;
}

void Ext::read(zserio::BitStreamReader& _in)
{
	m_map.read(_in);
}

void Ext::write(zserio::BitStreamWriter& _out, zserio::PreWriteAction _preWriteAction)
{
    if ((_preWriteAction & zserio::PRE_WRITE_INITIALIZE_CHILDREN) != 0)
        initializeChildren();

    m_map.write(_out, zserio::NO_PRE_WRITE_ACTION);
}

} // namespace ext

/**
 * Automatically generated by Zserio C++ extension version 1.1.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "ext/Value.h"

namespace ext
{

Value::Value()
{
    m_someNumber = uint8_t();
}

Value::Value(zserio::BitStreamReader& _in)
{
    read(_in);
}

std::string& Value::getSomeString()
{
    return m_someString;
}

const std::string& Value::getSomeString() const
{
    return m_someString;
}

void Value::setSomeString(const std::string& someString)
{
    m_someString = someString;
}

uint8_t Value::getSomeNumber() const
{
    return m_someNumber;
}

void Value::setSomeNumber(uint8_t someNumber)
{
    m_someNumber = someNumber;
}

size_t Value::bitSizeOf(size_t _bitPosition) const
{
    size_t _endBitPosition = _bitPosition;

    _endBitPosition += zserio::getBitSizeOfString(m_someString);
    _endBitPosition += UINT8_C(8);

    return _endBitPosition - _bitPosition;
}

size_t Value::initializeOffsets(size_t _bitPosition)
{
    size_t _endBitPosition = _bitPosition;

    _endBitPosition += zserio::getBitSizeOfString(m_someString);
    _endBitPosition += UINT8_C(8);

    return _endBitPosition;
}

bool Value::operator==(const Value& _other) const
{
    if (this != &_other)
    {
        return
                (m_someString == _other.m_someString) &&
                (m_someNumber == _other.m_someNumber);
    }

    return true;
}

int Value::hashCode() const
{
    int _result = zserio::HASH_SEED;

        _result = zserio::calcHashCode(_result, m_someString);
        _result = zserio::calcHashCode(_result, m_someNumber);

    return _result;
}

void Value::read(zserio::BitStreamReader& _in)
{
    m_someString = (std::string)_in.readString();
    m_someNumber = (uint8_t)_in.readBits(UINT8_C(8));
}

void Value::write(zserio::BitStreamWriter& _out, zserio::PreWriteAction)
{
    _out.writeString(m_someString);
    _out.writeBits(m_someNumber, UINT8_C(8));
}

} // namespace ext

/**
 * Automatically generated by Zserio C++ extension version 1.1.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "ext/ValueChoice.h"

namespace ext
{

ValueChoice::ValueChoice() :
        m_isInitialized(false)
{
}

ValueChoice::ValueChoice(zserio::BitStreamReader& _in,
        ext::Type t) :
        m_t(t),
        m_isInitialized(true)
{
    read(_in);
}

ValueChoice::ValueChoice(const ValueChoice& _other) :
        m_objectChoice(_other.m_objectChoice)
{
    if (_other.m_isInitialized)
        initialize(_other.m_t);
    else
        m_isInitialized = false;
}

ValueChoice& ValueChoice::operator=(const ValueChoice& _other)
{
    m_objectChoice = _other.m_objectChoice;
    if (_other.m_isInitialized)
        initialize(_other.m_t);
    else
        m_isInitialized = false;

    return *this;
}

void ValueChoice::initialize(
        ext::Type t)
{
    m_t = t;
    m_isInitialized = true;
}

ext::Type ValueChoice::getT() const
{
    if (!m_isInitialized)
        throw zserio::CppRuntimeException("Parameter t of compound ValueChoice "
                "is not initialized!");

    return m_t;
}

uint8_t ValueChoice::getFoo() const
{
    return m_objectChoice.get<uint8_t>();
}

void ValueChoice::setFoo(uint8_t foo)
{
    m_objectChoice.set(foo);
}

uint16_t ValueChoice::getBar() const
{
    return m_objectChoice.get<uint16_t>();
}

void ValueChoice::setBar(uint16_t bar)
{
    m_objectChoice.set(bar);
}

size_t ValueChoice::bitSizeOf(size_t _bitPosition) const
{
    size_t _endBitPosition = _bitPosition;

    switch (getT())
    {
    case ext::Type::FOO:
        _endBitPosition += UINT8_C(8);
        break;
    case ext::Type::BAR:
        _endBitPosition += UINT8_C(16);
        break;
    default:
        throw zserio::CppRuntimeException("No match in choice ValueChoice!");
    }

    return _endBitPosition - _bitPosition;
}

size_t ValueChoice::initializeOffsets(size_t _bitPosition)
{
    size_t _endBitPosition = _bitPosition;

    switch (getT())
    {
    case ext::Type::FOO:
        _endBitPosition += UINT8_C(8);
        break;
    case ext::Type::BAR:
        _endBitPosition += UINT8_C(16);
        break;
    default:
        throw zserio::CppRuntimeException("No match in choice ValueChoice!");
    }

    return _endBitPosition;
}

bool ValueChoice::operator==(const ValueChoice& _other) const
{
    if (this != &_other)
    {
        return
                (getT() == _other.getT()) &&
                (m_objectChoice == _other.m_objectChoice);
    }

    return true;
}

int ValueChoice::hashCode() const
{
    int _result = zserio::HASH_SEED;

    _result = zserio::calcHashCode(_result, getT());
    _result = zserio::calcHashCode(_result, m_objectChoice);

    return _result;
}

void ValueChoice::read(zserio::BitStreamReader& _in)
{
    switch (getT())
    {
    case ext::Type::FOO:
        m_objectChoice.reset(new (m_objectChoice.getResetStorage<uint8_t>())
                uint8_t(_in.readBits(UINT8_C(8))));
        break;
    case ext::Type::BAR:
        m_objectChoice.reset(new (m_objectChoice.getResetStorage<uint16_t>())
                uint16_t(_in.readBits(UINT8_C(16))));
        break;
    default:
        throw zserio::CppRuntimeException("No match in choice ValueChoice!");
    }
}

void ValueChoice::write(zserio::BitStreamWriter& _out, zserio::PreWriteAction)
{
    switch (getT())
    {
    case ext::Type::FOO:
        _out.writeBits(m_objectChoice.get<uint8_t>(), UINT8_C(8));
        break;
    case ext::Type::BAR:
        _out.writeBits(m_objectChoice.get<uint16_t>(), UINT8_C(16));
        break;
    default:
        throw zserio::CppRuntimeException("No match in choice ValueChoice!");
    }
}

} // namespace ext
