/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/BitSizeOfCalculator.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>

#include "ext/Type.h"

namespace ext
{

Type::Type() : m_value(FOO)
{
}

Type::Type(e_Type value) : m_value(value)
{
}

Type::Type(_base_type baseTypeValue)
        : m_value(static_cast<e_Type>(baseTypeValue))
{
}

Type::Type(zserio::BitStreamReader& _in)
{
    read(_in);
}

Type::operator e_Type() const
{
    return m_value;
}

uint8_t Type::getValue() const
{
    return m_value;
}

size_t Type::bitSizeOf(size_t) const
{
    return UINT8_C(8);
}

size_t Type::initializeOffsets(size_t _bitPosition) const
{
    return _bitPosition + bitSizeOf(_bitPosition);
}

bool Type::operator==(const Type& other) const
{
    return m_value == other.m_value;
}

bool Type::operator==(e_Type other) const
{
    return m_value == other;
}

int Type::hashCode() const
{
    return zserio::calcHashCode(zserio::HASH_SEED, static_cast<uint8_t>(m_value));
}

void Type::read(zserio::BitStreamReader& _in)
{
    m_value = toEnum(_in.readBits(UINT8_C(8)));
}

void Type::write(zserio::BitStreamWriter& _out, zserio::PreWriteAction) const
{
    _out.writeBits(static_cast<uint8_t>(m_value), UINT8_C(8));
}

const char* Type::toString() const
{
    switch (m_value)
    {
    case FOO:
        return "FOO";
    case BAR:
        return "BAR";
    default:
        return "UNKNOWN";
    }
}

Type Type::toEnum(uint8_t rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
        return FOO;
    case UINT8_C(1):
        return BAR;
    default:
        throw zserio::CppRuntimeException("Unknown value for enumeration Type: " +
                zserio::convertToString(rawValue) + "!");
    }
}

} // namespace ext
