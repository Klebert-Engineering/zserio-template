
/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef HOST_MAP_LIST_PARAMS_H
#define HOST_MAP_LIST_PARAMS_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/PreWriteAction.h>
#include <zserio/ObjectArray.h>
#include <zserio/Types.h>

#include "host/Map.h"

namespace host
{
template <class T,class V>
class MapListParams
{
public:
    MapListParams();
    MapListParams(zserio::BitStreamReader& _in,
            uint8_t num);

    MapListParams(const MapListParams& _other);
   MapListParams<T,V>& operator=(const MapListParams<T,V>& _other);

    void initialize(
            uint8_t num);
    void initializeChildren();

    uint8_t getNum() const;

    zserio::ObjectArray<host::Map<T,V> >& getMaps();
    const zserio::ObjectArray<host::Map<T,V> >& getMaps() const;
    void setMaps(const zserio::ObjectArray<host::Map<T,V> >& maps);

    size_t bitSizeOf(size_t _bitPosition = 0) const;
    size_t initializeOffsets(size_t _bitPosition);

    bool operator==(const MapListParams& other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& _in);
    void write(zserio::BitStreamWriter& _out,
            zserio::PreWriteAction _preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint8_t m_num;
    bool m_isInitialized;

    zserio::ObjectArray<host::Map<T,V> > m_maps;
};

} // namespace host

#include "MapListParams.cpp"

#endif // HOST_MAP_LIST_PARAMS_H
