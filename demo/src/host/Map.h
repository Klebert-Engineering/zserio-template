
/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef HOST_MAP_H
#define HOST_MAP_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/PreWriteAction.h>
#include <zserio/OptionalHolder.h>

#include "host/Header.h"

namespace host
{
template <class T,class V>
class Map
{
public:
    Map();
    explicit Map(zserio::BitStreamReader& _in);

    Map(const Map<T,V>& _other);
    Map<T,V>& operator=(const Map<T,V>& _other);

    void initializeChildren();

    host::Header& getHeader();
    const host::Header& getHeader() const;
    void setHeader(const host::Header& header);

    T& getType();
    const T& getType() const;
    void setType(const T& type);

    V& getValue();
    const V& getValue() const;
    void setValue(const V& value);

    size_t bitSizeOf(size_t _bitPosition = 0) const;
    size_t initializeOffsets(size_t _bitPosition);

    bool operator==(const Map& other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& _in);
    void write(zserio::BitStreamWriter& _out,
            zserio::PreWriteAction _preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS);

private:
    bool m_areChildrenInitialized;

    zserio::InPlaceOptionalHolder<host::Header> m_header;

    zserio::InPlaceOptionalHolder<T> m_type;

    zserio::InPlaceOptionalHolder<V> m_value;
};

} // namespace host

#include "Map.cpp"

#endif // HOST_MAP_H
